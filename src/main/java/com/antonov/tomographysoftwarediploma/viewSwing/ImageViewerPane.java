/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.antonov.tomographysoftwarediploma.viewSwing;

import java.awt.Graphics2D;
import java.awt.Point;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.event.MouseMotionListener;
import java.awt.event.MouseWheelEvent;
import java.awt.event.MouseWheelListener;
import java.awt.geom.AffineTransform;
import java.awt.image.AffineTransformOp;
import java.awt.image.BufferedImage;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JComponent;
import javax.swing.JViewport;
import javax.swing.event.MouseInputListener;

/**
 *
 * @author Antonov
 */
public class ImageViewerPane extends javax.swing.JFrame {

    /**
     * Creates new form ImageViewer
     */
//    double scale = 1.0;
    private Point point;
    private BufferedImage initialImage;

    public ImageViewerPane() {
        initComponents();
    }

    ImageViewerPane(BufferedImage image) {
        initComponents();
        this.image.setIcon(new ImageIcon(image));
        this.initialImage = image;
        initListeners();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        imagePanel = new javax.swing.JScrollPane();
        image = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(500, 500));

        imagePanel.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));

        image.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        image.setToolTipText("");
        image.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        image.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        image.addMouseWheelListener(new java.awt.event.MouseWheelListener() {
            public void mouseWheelMoved(java.awt.event.MouseWheelEvent evt) {
                imageMouseWheelMoved(evt);
            }
        });
        imagePanel.setViewportView(image);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(imagePanel, javax.swing.GroupLayout.DEFAULT_SIZE, 629, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(imagePanel, javax.swing.GroupLayout.DEFAULT_SIZE, 511, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void imageMouseWheelMoved(java.awt.event.MouseWheelEvent evt) {//GEN-FIRST:event_imageMouseWheelMoved
        // TODO add your handling code here:

        image.getIcon();

    }//GEN-LAST:event_imageMouseWheelMoved

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ImageViewerPane.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ImageViewerPane.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ImageViewerPane.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ImageViewerPane.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ImageViewerPane().setVisible(true);

            }
        });

    }

    public BufferedImage aspectZoom(double scale) {

        Icon icon = image.getIcon();
        double origWidth = icon.getIconWidth(), origHeight = icon.getIconHeight();
//        double cutWidth = origWidth / scale, cutHeight = origHeight / scale;
//
//        int upperLeftX = (int) Math.round(focus.getX() - cutWidth / 2.0), upperLeftY = (int) Math.round(focus.getY() - cutHeight / 2.0);
//        int bottomRightX = (int) Math.ceil(focus.getX() + cutWidth / 2.0), bottomRightY = (int) Math.ceil(focus.getY() + cutHeight / 2.0);
//
//        if (upperLeftX < 0) {
//            upperLeftX = 0;
//        }
//        if (upperLeftY < 0) {
//            upperLeftY = 0;
//        }
//        if (bottomRightX > origWidth) {
//            int a = upperLeftX;
//            upperLeftX = upperLeftX - (int) (bottomRightX - origWidth);
//            bottomRightX = (int) Math.ceil(upperLeftX + cutWidth);
//        }
//        if (bottomRightY > origHeight) {
//            int a = upperLeftY;
//            upperLeftY = upperLeftY - (int) (bottomRightY - origHeight);
//            bottomRightY = (int) Math.ceil(upperLeftY + cutHeight);
//        }
//
//        BufferedImage croppedImage = image.getSubimage(upperLeftX, upperLeftY, ((int) cutWidth == 0 ? 1 : (int) cutWidth), ((int) cutHeight == 0 ? 1 : (int) cutHeight));
//
//        AffineTransform transform = new AffineTransform();
//        transform.setToScale(origWidth / cutWidth, origHeight / cutHeight);
//        AffineTransformOp tOper = new AffineTransformOp(transform, AffineTransformOp.TYPE_BICUBIC);
//
//        BufferedImage zoomedImage = tOper.filter(croppedImage, null);

        int newImageWidth = (new Double(origWidth * scale)).intValue();
        int newImageHeight = (new Double(origHeight * scale)).intValue();
        BufferedImage resizedImage = new BufferedImage(newImageWidth, newImageHeight, initialImage.getType());
        Graphics2D g = resizedImage.createGraphics();
        g.drawImage(initialImage, 0, 0, newImageWidth, newImageHeight, null);
        g.dispose();
        return resizedImage;
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    public javax.swing.JLabel image;
    private javax.swing.JScrollPane imagePanel;
    // End of variables declaration//GEN-END:variables

    private void initListeners() {

        image.addMouseWheelListener(new MouseWheelListener() {

            @Override
            public void mouseWheelMoved(MouseWheelEvent e) {
                int notches = e.getWheelRotation();
                Point p = e.getPoint();
                if (notches < 0) {
                    image.setIcon(new ImageIcon(aspectZoom(1.1)));
                    imagePanel.getViewport().setViewPosition(p);
                } else {
                    image.setIcon(new ImageIcon(aspectZoom(0.9)));
                    imagePanel.getViewport().setViewPosition(p);
                }
            }
        });

        image.addMouseListener(new MouseAdapter() {

            @Override
            public void mousePressed(MouseEvent e) {
                point = e.getPoint();
            }

        });
        image.addMouseMotionListener(new Dragger());
        
    }

    class Dragger extends MouseAdapter implements MouseMotionListener {

        public Point startPt;

        public void mouseMoved(MouseEvent me) {
        }

        public void mouseDragged(MouseEvent me) {
            
            JViewport viewPort = imagePanel.getViewport();
            Point scrollPosition = viewPort.getViewPosition();

            int dx = me.getX() - point.x;
            int dy = me.getY() - point.y;

            scrollPosition.x += dx;
            scrollPosition.y += dy;

            viewPort.setViewPosition(scrollPosition);
            point = me.getPoint();
        }

        public void mousePressed(MouseEvent me) {
            startPt = me.getPoint();
        }
        
        
    }
}
